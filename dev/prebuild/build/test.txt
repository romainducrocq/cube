

cdef class util_ast_AST_0:
    cdef public tuple[str, ...] _fields


    """
    util_ast_AST_0 node
    """
    pass

cdef class util_ast_TIdentifier_0(util_ast_AST_0):
    cdef public str str_t


    """ identifier str_t """
    def __cinit__(self):
        self._fields = ('str_t',)

    def __init__(self, str str_t):
        self.str_t = str_t


cdef class util_ast_TInt_0(util_ast_AST_0):
    cdef public int int_t


    """ int int_t """
    def __cinit__(self):
        self._fields = ('int_t',)

    def __init__(self, int_t: int):
        self.int_t = int_t


cdef list[tuple[object, str]] util_ast_ast_iter_fields_0(util_ast_AST_0 node):

    cdef list[tuple[object, str]] fields = []

    cdef str name
    for name in node._fields:
        fields.append((getattr(node, name), name))

    return fields


cdef list[tuple[util_ast_AST_0, str, int]] util_ast_ast_iter_child_nodes_0(util_ast_AST_0 node):

    cdef object field, item
    cdef list[tuple[util_ast_AST_0, str, int]] child_nodes = []

    cdef int e
    cdef str name
    for name in node._fields:
        field = getattr(node, name)
        if isinstance(field, util_ast_AST_0):
            child_nodes.append((field, name, -1))
        elif isinstance(field, list):
            for e, item in enumerate(field):
                if isinstance(item, util_ast_AST_0):
                    child_nodes.append((item, name, e))

    return child_nodes


cdef void util_ast_ast_set_child_node_0(object field, str name, int index, util_ast_AST_0 set_node):
    if isinstance(field, util_ast_AST_0):
        setattr(field, name, set_node)
    elif isinstance(getattr(field, name), list):
        getattr(field, name)[index] = set_node


""" pretty util_ast_string_0 """

cdef str util_ast_string_0 = ''
cdef int util_ast_indent_0 = 0


cdef void util_ast__pretty_string_child_0(str _child_kind, object _child_node):
    global util_ast_string_0
    global util_ast_indent_0

    if type(_child_node) in (str, int, type(None)):
        util_ast_string_0 += str(' ' * util_ast_indent_0 + _child_kind + type(_child_node).__name__ + ': '
                      + str(_child_node) + '\n')
    else:
        util_ast__pretty_string_0(_child_kind, _child_node)


cdef void util_ast__pretty_string_0(str kind, object node):
    global util_ast_string_0
    global util_ast_indent_0

    cdef int e
    cdef str child_kind
    cdef object child_node
    cdef object list_node

    util_ast_string_0 += str(' ' * util_ast_indent_0 + kind + type(node).__name__ + ':' + '\n')
    util_ast_indent_0 += 4

    for child_node, child_kind in util_ast_ast_iter_fields_0(node):
        if isinstance(child_node, list):
            util_ast_string_0 += str(' ' * util_ast_indent_0 + '<' + child_kind + '> List(' + str(len(child_node)) + '):' + '\n')
            util_ast_indent_0 += 4

            for e, list_node in enumerate(child_node):
                util_ast__pretty_string_child_0('[' + str(e) + '] ', list_node)

            util_ast_indent_0 -= 4

        else:
            util_ast__pretty_string_child_0('<' + child_kind + '> ', child_node)

    util_ast_indent_0 -= 4


cdef str util_ast_ast_pretty_string_0(util_ast_AST_0 node):
    global util_ast_string_0
    global util_ast_indent_0
    util_ast_string_0 = ""
    util_ast_indent_0 = 0

    util_ast__pretty_string_0('<util_ast_AST_0> ', node)
    return util_ast_string_0[:-1]


cdef class util_iota_enum_IotaEnum_1:
    cdef int iota_counter
    cdef dict[str, int] iota_enum
    cdef int get(self, str key)
    cdef dict[str, int] iter(self)



    def __init__(self, tuple[str, ...] names):
        self.iota_counter = 0
        self.iota_enum = {}

        cdef str name
        for name in names:
            self.iota_enum[name] = self.iota_counter
            self.iota_counter += 1

    cdef int get(self, str key):
        return self.iota_enum[key]

    cdef dict[str, int] iter(self):
        return self.iota_enum


from libc.stdio cimport *
cdef extern from "stdio.h":
    FILE *fopen(const char *, const char *)
    int fclose(FILE *)
    ssize_t getline(char **, size_t *, FILE *)


class util_fopen_FileError_2(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(util_fopen_FileError_2, self).__init__(message)


cdef FILE *util_fopen_cfile_2 = NULL


cdef void util_fopen_file_open_2(str filename):
    global util_fopen_cfile_2
    util_fopen_cfile_2 = NULL

    cdef bytes b_filename = filename.encode("UTF-8")
    cdef char *c_filename = b_filename

    util_fopen_cfile_2 = fopen(c_filename, "rb")
    if util_fopen_cfile_2 == NULL:

        raise util_fopen_FileError_2(
            f"File {filename} does not exist")


cdef tuple[bint, str] util_fopen_get_line_2():

    cdef size_t l = 0
    cdef char *cline = NULL
    cdef ssize_t read = getline(&cline, &l, util_fopen_cfile_2)

    if read == -1:
        return True, ''

    return False, str(cline.decode("UTF-8"))


cdef void util_fopen_file_close_2():

    fclose(util_fopen_cfile_2)





cdef class parser_c_ast_CUnaryOp_3(util_ast_AST_0):


    """
    unary_operator = Complement
                   | Negate
                   | Not
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CComplement_3(parser_c_ast_CUnaryOp_3):


    """ Complement """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CNegate_3(parser_c_ast_CUnaryOp_3):


    """ Negate """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CNot_3(parser_c_ast_CUnaryOp_3):


    """ Not """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBinaryOp_3(util_ast_AST_0):


    """
    binary_operator = Add
                    | Subtract
                    | Multiply
                    | Divide
                    | Remainder
                    | BitAnd
                    | BitOr
                    | BitXor
                    | BitShiftLeft
                    | BitShiftRight
                    | And
                    | Or
                    | Equal
                    | NotEqual
                    | LessThan
                    | LessOrEqual
                    | GreaterThan
                    | GreaterOrEqual
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CAdd_3(parser_c_ast_CBinaryOp_3):


    """ Add """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CSubtract_3(parser_c_ast_CBinaryOp_3):


    """ Subtract """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CMultiply_3(parser_c_ast_CBinaryOp_3):


    """ Multiply """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CDivide_3(parser_c_ast_CBinaryOp_3):


    """ Divide """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CRemainder_3(parser_c_ast_CBinaryOp_3):


    """ Remainder """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBitAnd_3(parser_c_ast_CBinaryOp_3):


    """ BitAnd """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBitOr_3(parser_c_ast_CBinaryOp_3):


    """ BitOr """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBitXor_3(parser_c_ast_CBinaryOp_3):


    """ BitXor """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBitShiftLeft_3(parser_c_ast_CBinaryOp_3):


    """ BitShiftLeft """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CBitShiftRight_3(parser_c_ast_CBinaryOp_3):


    """ BitShiftRight """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CAnd_3(parser_c_ast_CBinaryOp_3):


    """ And """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_COr_3(parser_c_ast_CBinaryOp_3):


    """ Or """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CEqual_3(parser_c_ast_CBinaryOp_3):


    """ Equal """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CNotEqual_3(parser_c_ast_CBinaryOp_3):


    """ NotEqual """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CLessThan_3(parser_c_ast_CBinaryOp_3):


    """ LessThan """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CLessOrEqual_3(parser_c_ast_CBinaryOp_3):


    """ LessOrEqual """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CGreaterThan_3(parser_c_ast_CBinaryOp_3):


    """ GreaterThan """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CGreaterOrEqual_3(parser_c_ast_CBinaryOp_3):


    """ GreaterOrEqual """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CExp_3(util_ast_AST_0):


    """
    exp = Constant(int value)
        | Var(identifier)
        | Unary(unary_operator, exp)
        | Binary(binary_operator, exp, exp)
        | Assignment(exp, exp)
        | AssignmentCompound(binary_operator, exp, exp)
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CConstant_3(parser_c_ast_CExp_3):
    cdef public util_ast_TInt_0 value


    """ Constant(int value) """
    def __cinit__(self):
        self._fields = ('value',)

    def __init__(self, util_ast_TInt_0 value):
        self.value = value


cdef class parser_c_ast_CVar_3(parser_c_ast_CExp_3):
    cdef public util_ast_TIdentifier_0 name


    """ Var(identifier name) """
    def __cinit__(self):
        self._fields = ('name',)

    def __init__(self, util_ast_TIdentifier_0 name):
        self.name = name


cdef class parser_c_ast_CUnary_3(parser_c_ast_CExp_3):
    cdef public parser_c_ast_CUnaryOp_3 unary_op
    cdef public parser_c_ast_CExp_3 exp


    """ Unary(unary_operator, exp) """
    def __cinit__(self):
        self._fields = ('unary_op', 'exp')

    def __init__(self, parser_c_ast_CUnaryOp_3 unary_op, parser_c_ast_CExp_3 exp):
        self.unary_op = unary_op
        self.exp = exp


cdef class parser_c_ast_CBinary_3(parser_c_ast_CExp_3):
    cdef public parser_c_ast_CBinaryOp_3 binary_op
    cdef public parser_c_ast_CExp_3 exp_left
    cdef public parser_c_ast_CExp_3 exp_right


    """ Binary(binary_operator, exp, exp) """
    def __cinit__(self):
        self._fields = ('binary_op', 'exp_left', 'exp_right')

    def __init__(self, parser_c_ast_CBinaryOp_3 binary_op, parser_c_ast_CExp_3 exp_left, parser_c_ast_CExp_3 exp_right):
        self.binary_op = binary_op
        self.exp_left = exp_left
        self.exp_right = exp_right


cdef class parser_c_ast_CAssignment_3(parser_c_ast_CExp_3):
    cdef public parser_c_ast_CExp_3 exp_left
    cdef public parser_c_ast_CExp_3 exp_right


    """ Assignment(exp, exp) """
    def __cinit__(self):
        self._fields = ('exp_left', 'exp_right')

    def __init__(self, parser_c_ast_CExp_3 exp_left, parser_c_ast_CExp_3 exp_right):
        self.exp_left = exp_left
        self.exp_right = exp_right


cdef class parser_c_ast_CAssignmentCompound_3(parser_c_ast_CExp_3):
    cdef public parser_c_ast_CBinaryOp_3 binary_op
    cdef public parser_c_ast_CExp_3 exp_left
    cdef public parser_c_ast_CExp_3 exp_right


    """ AssignmentCompound(binary_operator, exp, exp) """
    def __cinit__(self):
        self._fields = ('binary_op', 'exp_left', 'exp_right')

    def __init__(self, parser_c_ast_CBinaryOp_3 binary_op, parser_c_ast_CExp_3 exp_left, parser_c_ast_CExp_3 exp_right):
        self.binary_op = binary_op
        self.exp_left = exp_left
        self.exp_right = exp_right


cdef class parser_c_ast_CStatement_3(util_ast_AST_0):


    """
    statement = Return(exp)
              | Expression(exp)
              | Null
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CReturn_3(parser_c_ast_CStatement_3):
    cdef public parser_c_ast_CExp_3 exp


    """ Return(exp) """
    def __cinit__(self):
        self._fields = ('exp',)

    def __init__(self, parser_c_ast_CExp_3 exp):
        self.exp = exp


cdef class parser_c_ast_CExpression_3(parser_c_ast_CStatement_3):
    cdef public parser_c_ast_CExp_3 exp


    """ Expression(exp) """
    def __cinit__(self):
        self._fields = ('exp',)

    def __init__(self, parser_c_ast_CExp_3 exp):
        self.exp = exp


cdef class parser_c_ast_CNull_3(parser_c_ast_CStatement_3):


    """ Null """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CDeclaration_3(util_ast_AST_0):


    """
    declaration = Declaration(identifier, exp?)
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CDecl_3(parser_c_ast_CDeclaration_3):
    cdef public util_ast_TIdentifier_0 name
    cdef public parser_c_ast_CExp_3 ini


    """ Declaration(identifier name, exp? init) """
    def __cinit__(self):
        self._fields = ('name', 'init')

    def __init__(self, util_ast_TIdentifier_0 name, parser_c_ast_CExp_3 init):
        self.name = name
        self.init = init


cdef class parser_c_ast_CBlockItem_3(util_ast_AST_0):


    """
    block_item = S(statement)
               | D(declaration)
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CS_3(parser_c_ast_CBlockItem_3):
    cdef public parser_c_ast_CStatement_3 statement


    """ S(statement) """
    def __cinit__(self):
        self._fields = ('statement',)

    def __init__(self, parser_c_ast_CStatement_3 statement):
        self.statement = statement


cdef class parser_c_ast_CD_3(parser_c_ast_CBlockItem_3):
    cdef public parser_c_ast_CDeclaration_3 declaration


    """ D(declaration) """
    def __cinit__(self):
        self._fields = ('declaration',)

    def __init__(self, parser_c_ast_CDeclaration_3 declaration):
        self.declaration = declaration


cdef class parser_c_ast_CFunctionDef_3(util_ast_AST_0):


    """
    function_definition = Function(identifier, block_item*)
    """
    def __cinit__(self):
        self._fields = ()


cdef class parser_c_ast_CFunction_3(parser_c_ast_CFunctionDef_3):
    cdef public util_ast_TIdentifier_0 name
    cdef public list[parser_c_ast_CBlockItem_3] body


    """ Function(identifier name, block_item* body) """
    def __cinit__(self):
        self._fields = ('name', 'body')

    def __init__(self, util_ast_TIdentifier_0 name, list[parser_c_ast_CBlockItem_3] body):
        self.name = name
        self.body = body


cdef class parser_c_ast_CProgram_3(util_ast_AST_0):
    cdef public parser_c_ast_CFunctionDef_3 function_def


    """ util_ast_AST_0 = Program(function_definition) """
    def __cinit__(self):
        self._fields = ('function_def',)

    def __init__(self, parser_c_ast_CFunctionDef_3 function_def):
        self.function_def = function_def

cdef util_iota_enum_IotaEnum_1 parser_lexer_TOKEN_KIND_4

import re



class parser_lexer_LexerError_4(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(parser_lexer_LexerError_4, self).__init__(message)


cdef class parser_lexer_Token_4:
    cdef str token
    cdef int token_kind



    def __init__(self, token: str, token_kind: int):
        self.token = token
        self.token_kind = token_kind


parser_lexer_TOKEN_KIND_4 = util_iota_enum_IotaEnum_1((
    "assignment_bitshiftleft",
    "assignment_bitshiftright",

    "unop_decrement",
    "binop_bitshiftleft",
    "binop_bitshiftright",
    "binop_and",
    "binop_or",
    "binop_equalto",
    "binop_notequal",
    "binop_lessthanorequal",
    "binop_greaterthanorequal",
    "assignment_plus",
    "assignment_difference",
    "assignment_product",
    "assignment_quotient",
    "assignment_remainder",
    "assignment_bitand",
    "assignment_bitor",
    "assignment_bitxor",

    "parenthesis_open",
    "parenthesis_close",
    "brace_open",
    "brace_close",
    "semicolon",
    "unop_complement",
    "unop_negation",
    "unop_not",
    "binop_addition",
    "binop_multiplication",
    "binop_division",
    "binop_remainder",
    "binop_bitand",
    "binop_bitor",
    "binop_bitxor",
    "binop_lessthan",
    "binop_greaterthan",
    "assignment_simple",

    "key_int",
    "key_void",
    "key_return",
    "identifier",
    "constant",

    "skip",
    "error"
))


cdef dict[int, str] parser_lexer_TOKEN_REGEX_4 = {
    parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft'): r"<<=",
    parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright'): r">>=",

    parser_lexer_TOKEN_KIND_4.get('unop_decrement'): r"--",
    parser_lexer_TOKEN_KIND_4.get('binop_bitshiftleft'): r"<<",
    parser_lexer_TOKEN_KIND_4.get('binop_bitshiftright'): r">>",
    parser_lexer_TOKEN_KIND_4.get('binop_and'): r"&&",
    parser_lexer_TOKEN_KIND_4.get('binop_or'): r"\|\|",
    parser_lexer_TOKEN_KIND_4.get('binop_equalto'): r"==",
    parser_lexer_TOKEN_KIND_4.get('binop_notequal'): r"!=",
    parser_lexer_TOKEN_KIND_4.get('binop_lessthanorequal'): r"<=",
    parser_lexer_TOKEN_KIND_4.get('binop_greaterthanorequal'): r">=",
    parser_lexer_TOKEN_KIND_4.get('assignment_plus'): r"\+=",
    parser_lexer_TOKEN_KIND_4.get('assignment_difference'): r"-=",
    parser_lexer_TOKEN_KIND_4.get('assignment_product'): r"\*=",
    parser_lexer_TOKEN_KIND_4.get('assignment_quotient'): r"/=",
    parser_lexer_TOKEN_KIND_4.get('assignment_remainder'): r"%=",
    parser_lexer_TOKEN_KIND_4.get('assignment_bitand'): r"&=",
    parser_lexer_TOKEN_KIND_4.get('assignment_bitor'): r"\|=",
    parser_lexer_TOKEN_KIND_4.get('assignment_bitxor'): r"\^=",

    parser_lexer_TOKEN_KIND_4.get('parenthesis_open'): r"\(",
    parser_lexer_TOKEN_KIND_4.get('parenthesis_close'): r"\)",
    parser_lexer_TOKEN_KIND_4.get('brace_open'): r"{",
    parser_lexer_TOKEN_KIND_4.get('brace_close'): r"}",
    parser_lexer_TOKEN_KIND_4.get('semicolon'): r";",
    parser_lexer_TOKEN_KIND_4.get('unop_complement'): r"~",
    parser_lexer_TOKEN_KIND_4.get('unop_negation'): r"-",
    parser_lexer_TOKEN_KIND_4.get('unop_not'): r"!",
    parser_lexer_TOKEN_KIND_4.get('binop_addition'): r"\+",
    parser_lexer_TOKEN_KIND_4.get('binop_multiplication'): r"\*",
    parser_lexer_TOKEN_KIND_4.get('binop_division'): r"/",
    parser_lexer_TOKEN_KIND_4.get('binop_remainder'): r"%",
    parser_lexer_TOKEN_KIND_4.get('binop_bitand'): r"&",
    parser_lexer_TOKEN_KIND_4.get('binop_bitor'): r"\|",
    parser_lexer_TOKEN_KIND_4.get('binop_bitxor'): r"\^",
    parser_lexer_TOKEN_KIND_4.get('binop_lessthan'): r"<",
    parser_lexer_TOKEN_KIND_4.get('binop_greaterthan'): r">",
    parser_lexer_TOKEN_KIND_4.get('assignment_simple'): r"=",

    parser_lexer_TOKEN_KIND_4.get('key_int'): r"int\b",
    parser_lexer_TOKEN_KIND_4.get('key_void'): r"void\b",
    parser_lexer_TOKEN_KIND_4.get('key_return'): r"return\b",
    parser_lexer_TOKEN_KIND_4.get('identifier'): r"[a-zA-Z_]\w*\b",
    parser_lexer_TOKEN_KIND_4.get('constant'): r"[0-9]+\b",

    parser_lexer_TOKEN_KIND_4.get('skip'): r"[ \n\r\t\f\v]",
    parser_lexer_TOKEN_KIND_4.get('error'): r"."
}


cdef object parser_lexer_TOKEN_PATTERN_4 = re.compile(
    "|".join(f"(?P<{str(tk)}>{parser_lexer_TOKEN_REGEX_4[parser_lexer_TOKEN_KIND_4.get(tk)]})" for tk in parser_lexer_TOKEN_KIND_4.iter())
)

cdef list[parser_lexer_Token_4] parser_lexer_lexing_4(str filename):

    cdef list[parser_lexer_Token_4] tokens = []

    util_fopen_file_open_2(filename)

    cdef bint eof
    cdef str line
    cdef object match
    while True:
        eof, line = util_fopen_get_line_2()
        if eof:
            break

        for match in re.finditer(parser_lexer_TOKEN_PATTERN_4, line):
            if match.lastgroup is None:
                raise parser_lexer_LexerError_4(
                    f"No token found in line:\{line}")

            if parser_lexer_TOKEN_KIND_4.get(match.lastgroup) == parser_lexer_TOKEN_KIND_4.get('error'):
                raise parser_lexer_LexerError_4(
                    f"Invalid token \"{match.group()}\" found in line:\{line}")

            if parser_lexer_TOKEN_KIND_4.get(match.lastgroup) == parser_lexer_TOKEN_KIND_4.get('skip'):
                continue

            tokens.append(parser_lexer_Token_4(token=match.group(), token_kind=parser_lexer_TOKEN_KIND_4.get(match.lastgroup)))

    util_fopen_file_close_2()

    return tokens


                               parser_c_ast_CVar_3, parser_c_ast_CConstant_3, parser_c_ast_CUnary_3, parser_c_ast_CBinary_3)


class intermediate_name_NameManagerError_5(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(intermediate_name_NameManagerError_5, self).__init__(message)


cdef int intermediate_name_label_counter_5 = 0
cdef int intermediate_name_variable_counter_5 = 0


cdef util_ast_TIdentifier_0 intermediate_name_resolve_variable_identifier_5(util_ast_TIdentifier_0 variable):
    global intermediate_name_variable_counter_5

    intermediate_name_variable_counter_5 += 1
    cdef str name = f"{variable.str_t}.{intermediate_name_variable_counter_5 - 1}"

    return util_ast_TIdentifier_0(name)


cdef util_ast_TIdentifier_0 intermediate_name_represent_label_identifier_5(str label):
    global intermediate_name_label_counter_5

    intermediate_name_label_counter_5 += 1
    cdef str name = f"{label}.{intermediate_name_label_counter_5 - 1}"

    return util_ast_TIdentifier_0(name)


cdef util_ast_TIdentifier_0 intermediate_name_represent_variable_identifier_5(parser_c_ast_CExp_3 node):
    global intermediate_name_variable_counter_5

    cdef str variable
    if isinstance(node, parser_c_ast_CVar_3):
        variable = "var"
    elif isinstance(node, parser_c_ast_CConstant_3):
        variable = "constant"
    elif isinstance(node, parser_c_ast_CUnary_3):
        variable = "unary"
    elif isinstance(node, parser_c_ast_CBinary_3):
        variable = "binary"
    else:

        raise intermediate_name_NameManagerError_5(
            f"An error occurred in name management, unmanaged type {type(node)}")

    intermediate_name_variable_counter_5 += 1
    cdef str name = f"{variable}.{intermediate_name_variable_counter_5 - 1}"

    return util_ast_TIdentifier_0(name)




cdef class intermediate_tac_ast_TacUnaryOp_6(util_ast_AST_0):


    """
    unary_operator = Complement
                   | Negate
                   | Not
    """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacComplement_6(intermediate_tac_ast_TacUnaryOp_6):


    """ Complement """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacNegate_6(intermediate_tac_ast_TacUnaryOp_6):


    """ Negate """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacNot_6(intermediate_tac_ast_TacUnaryOp_6):


    """ Not """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBinaryOp_6(util_ast_AST_0):


    """
    binary_operator = Add
                    | Subtract
                    | Multiply
                    | Divide
                    | Remainder
                    | BitAnd
                    | BitOr
                    | BitXor
                    | BitShiftLeft
                    | BitShiftRight
                    | Equal
                    | NotEqual
                    | LessThan
                    | LessOrEqual
                    | GreaterThan
                    | GreaterOrEqual
    """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacAdd_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Add """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacSubtract_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Subtract """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacMultiply_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Multiply """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacDivide_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Divide """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacRemainder_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Remainder """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBitAnd_6(intermediate_tac_ast_TacBinaryOp_6):


    """ BitAnd """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBitOr_6(intermediate_tac_ast_TacBinaryOp_6):


    """ BitOr """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBitXor_6(intermediate_tac_ast_TacBinaryOp_6):


    """ BitXor """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBitShiftLeft_6(intermediate_tac_ast_TacBinaryOp_6):


    """ BitShiftLeft """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacBitShiftRight_6(intermediate_tac_ast_TacBinaryOp_6):


    """ BitShiftRight """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacEqual_6(intermediate_tac_ast_TacBinaryOp_6):


    """ Equal """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacNotEqual_6(intermediate_tac_ast_TacBinaryOp_6):


    """ NotEqual """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacLessThan_6(intermediate_tac_ast_TacBinaryOp_6):


    """ LessThan """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacLessOrEqual_6(intermediate_tac_ast_TacBinaryOp_6):


    """ LessOrEqual """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacGreaterThan_6(intermediate_tac_ast_TacBinaryOp_6):


    """ GreaterThan """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacGreaterOrEqual_6(intermediate_tac_ast_TacBinaryOp_6):


    """ GreaterOrEqual """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacValue_6(util_ast_AST_0):


    """
    val = Constant(int)
        | Var(identifier)
    """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacConstant_6(intermediate_tac_ast_TacValue_6):
    cdef public util_ast_TInt_0 value


    """ Constant(int) """
    def __cinit__(self):
        self._fields = ('value',)

    def __init__(self, util_ast_TInt_0 value):
        self.value = value


cdef class intermediate_tac_ast_TacVariable_6(intermediate_tac_ast_TacValue_6):
    cdef public util_ast_TIdentifier_0 name


    """ Var(identifier) """
    def __cinit__(self):
        self._fields = ('name',)

    def __init__(self, util_ast_TIdentifier_0 name):
        self.name = name


cdef class intermediate_tac_ast_TacInstruction_6(util_ast_AST_0):


    """
    instruction = Return(val)
                | Unary(unary_operator, val src, val dst)
                | Binary(binary_operator, val src1, val src2, val dst)
                | Copy(val src, val dst)
                | Jump(identifier target)
                | JumpIfZero(val condition, identifier target)
                | JumpIfNotZero(val condition, identifier target)
                | Label(identifier name)
    """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacReturn_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacValue_6 val


    """ Return(val) """
    def __cinit__(self):
        self._fields = ('val',)

    def __init__(self, intermediate_tac_ast_TacValue_6 val):
        self.val = val


cdef class intermediate_tac_ast_TacUnary_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacUnaryOp_6 unary_op
    cdef public intermediate_tac_ast_TacValue_6 src
    cdef public intermediate_tac_ast_TacValue_6 dst


    """ Unary(unary_operator, val src, val dst) """
    def __cinit__(self):
        self._fields = ('unary_op', 'src', 'dst')

    def __init__(self, intermediate_tac_ast_TacUnaryOp_6 unary_op, intermediate_tac_ast_TacValue_6 src, intermediate_tac_ast_TacValue_6 dst):
        self.unary_op = unary_op
        self.src = src
        self.dst = dst


cdef class intermediate_tac_ast_TacBinary_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacBinaryOp_6 binary_op
    cdef public intermediate_tac_ast_TacValue_6 src1
    cdef public intermediate_tac_ast_TacValue_6 src2
    cdef public intermediate_tac_ast_TacValue_6 dst


    """ Binary(binary_operator, val src1, val src2, val dst) """
    def __cinit__(self):
        self._fields = ('binary_op', 'src1', 'src2', 'dst')

    def __init__(self, intermediate_tac_ast_TacBinaryOp_6 binary_op, intermediate_tac_ast_TacValue_6 src1, intermediate_tac_ast_TacValue_6 src2, intermediate_tac_ast_TacValue_6 dst):
        self.binary_op = binary_op
        self.src1 = src1
        self.src2 = src2
        self.dst = dst


cdef class intermediate_tac_ast_TacCopy_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacValue_6 src
    cdef public intermediate_tac_ast_TacValue_6 dst


    """ Copy(val src, val dst) """
    def __cinit__(self):
        self._fields = ('src', 'dst')

    def __init__(self, intermediate_tac_ast_TacValue_6 src, intermediate_tac_ast_TacValue_6 dst):
        self.src = src
        self.dst = dst


cdef class intermediate_tac_ast_TacJump_6(intermediate_tac_ast_TacInstruction_6):
    cdef public util_ast_TIdentifier_0 target


    """ Jump(identifier target) """
    def __cinit__(self):
        self._fields = ('target',)

    def __init__(self, util_ast_TIdentifier_0 target):
        self.target = target


cdef class intermediate_tac_ast_TacJumpIfZero_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacValue_6 condition
    cdef public util_ast_TIdentifier_0 target


    """ JumpIfZero(val condition, identifier target) """
    def __cinit__(self):
        self._fields = ('condition', 'target')

    def __init__(self, intermediate_tac_ast_TacValue_6 condition, util_ast_TIdentifier_0 target):
        self.condition = condition
        self.target = target


cdef class intermediate_tac_ast_TacJumpIfNotZero_6(intermediate_tac_ast_TacInstruction_6):
    cdef public intermediate_tac_ast_TacValue_6 condition
    cdef public util_ast_TIdentifier_0 target


    """ JumpIfNotZero(val condition, identifier target) """
    def __cinit__(self):
        self._fields = ('condition', 'target')

    def __init__(self, intermediate_tac_ast_TacValue_6 condition, util_ast_TIdentifier_0 target):
        self.condition = condition
        self.target = target


cdef class intermediate_tac_ast_TacLabel_6(intermediate_tac_ast_TacInstruction_6):
    cdef public util_ast_TIdentifier_0 name


    """ Label(identifier name) """
    def __cinit__(self):
        self._fields = ('name',)

    def __init__(self, util_ast_TIdentifier_0 name):
        self.name = name


cdef class intermediate_tac_ast_TacFunctionDef_6(util_ast_AST_0):


    """
    function_definition = Function(identifier, instruction* body)
    """
    def __cinit__(self):
        self._fields = ()


cdef class intermediate_tac_ast_TacFunction_6(intermediate_tac_ast_TacFunctionDef_6):
    cdef public util_ast_TIdentifier_0 name
    cdef public list[intermediate_tac_ast_TacInstruction_6] body


    """ Function(identifier, instruction* body) """
    def __cinit__(self):
        self._fields = ('name', 'body')

    def __init__(self, util_ast_TIdentifier_0 name, list[intermediate_tac_ast_TacInstruction_6] body):
        self.name = name
        self.body = body


cdef class intermediate_tac_ast_TacProgram_6(util_ast_AST_0):
    cdef public intermediate_tac_ast_TacFunctionDef_6 function_def


    """ util_ast_AST_0 = Program(function_definition) """
    def __cinit__(self):
        self._fields = ('function_def',)

    def __init__(self, intermediate_tac_ast_TacFunctionDef_6 function_def):
        self.function_def = function_def




class parser_precedence_PrecedenceManagerError_7(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(parser_precedence_PrecedenceManagerError_7, self).__init__(message)


cdef dict[int, int] parser_precedence_TOKEN_PRECEDENCE_7 = {
    parser_lexer_TOKEN_KIND_4.get('binop_multiplication'): 50,
    parser_lexer_TOKEN_KIND_4.get('binop_division'): 50,
    parser_lexer_TOKEN_KIND_4.get('binop_remainder'): 50,
    parser_lexer_TOKEN_KIND_4.get('unop_negation'): 45,
    parser_lexer_TOKEN_KIND_4.get('binop_addition'): 45,
    parser_lexer_TOKEN_KIND_4.get('binop_bitshiftleft'): 40,
    parser_lexer_TOKEN_KIND_4.get('binop_bitshiftright'): 40,
    parser_lexer_TOKEN_KIND_4.get('binop_lessthan'): 35,
    parser_lexer_TOKEN_KIND_4.get('binop_lessthanorequal'): 35,
    parser_lexer_TOKEN_KIND_4.get('binop_greaterthan'): 35,
    parser_lexer_TOKEN_KIND_4.get('binop_greaterthanorequal'): 35,
    parser_lexer_TOKEN_KIND_4.get('binop_equalto'): 30,
    parser_lexer_TOKEN_KIND_4.get('binop_notequal'): 30,
    parser_lexer_TOKEN_KIND_4.get('binop_bitand'): 25,
    parser_lexer_TOKEN_KIND_4.get('binop_bitxor'): 20,
    parser_lexer_TOKEN_KIND_4.get('binop_bitor'): 15,
    parser_lexer_TOKEN_KIND_4.get('binop_and'): 10,
    parser_lexer_TOKEN_KIND_4.get('binop_or'): 5,
    parser_lexer_TOKEN_KIND_4.get('assignment_simple'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_plus'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_difference'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_product'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_quotient'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_remainder'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_bitand'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_bitor'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_bitxor'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft'): 1,
    parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright'): 1
}


cdef int parser_precedence_parse_token_precedence_7(int token_kind):

    cdef int precedence
    try:
        precedence = parser_precedence_TOKEN_PRECEDENCE_7[token_kind]
    except KeyError:

        raise parser_precedence_PrecedenceManagerError_7(
            f"""An error occurred in precedence management, unmanaged token {
                list(parser_lexer_TOKEN_KIND_4.iter().keys())[list(parser_lexer_TOKEN_KIND_4.iter().values()).index(token_kind)]}""")

    return precedence


                               parser_c_ast_CD_3, parser_c_ast_CDeclaration_3, parser_c_ast_CDecl_3, parser_c_ast_CS_3, parser_c_ast_CStatement_3, parser_c_ast_CReturn_3, parser_c_ast_CExpression_3, parser_c_ast_CNull_3,
                               parser_c_ast_CExp_3, parser_c_ast_CVar_3, parser_c_ast_CConstant_3, parser_c_ast_CUnary_3, parser_c_ast_CBinary_3, parser_c_ast_CAssignment_3, parser_c_ast_CAssignmentCompound_3)


class intermediate_semantic_analyzer_SemanticAnalyzerError_8(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(intermediate_semantic_analyzer_SemanticAnalyzerError_8, self).__init__(message)


cdef dict[str, str] intermediate_semantic_analyzer_variable_map_8 = {}


cdef void intermediate_semantic_analyzer_resolve_statement_8(parser_c_ast_CStatement_3 node):
    if isinstance(node, (parser_c_ast_CReturn_3, parser_c_ast_CExpression_3)):
        intermediate_semantic_analyzer_resolve_expression_8(node.exp)
        return
    if isinstance(node, parser_c_ast_CNull_3):
        return

    raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
        "An error occurred in semantic analysis, not all nodes were visited")


cdef void intermediate_semantic_analyzer_resolve_declaration_8(parser_c_ast_CDeclaration_3 node):
    global intermediate_semantic_analyzer_variable_map_8

    cdef util_ast_TIdentifier_0 name
    if isinstance(node, parser_c_ast_CDecl_3):
        if node.name.str_t in intermediate_semantic_analyzer_variable_map_8:

            raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
                f"Variable {node.name.str_t} was already declared in this scope")

        name = intermediate_name_resolve_variable_identifier_5(node.name)
        intermediate_semantic_analyzer_variable_map_8[node.name.str_t] = name.str_t
        node.name = name
        if node.init:
            intermediate_semantic_analyzer_resolve_expression_8(node.init)
        return

    raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
        "An error occurred in semantic analysis, not all nodes were visited")


cdef void intermediate_semantic_analyzer_resolve_expression_8(parser_c_ast_CExp_3 node):
    if isinstance(node, parser_c_ast_CConstant_3):
        return
    cdef util_ast_TIdentifier_0 name
    if isinstance(node, parser_c_ast_CVar_3):
        if node.name.str_t in intermediate_semantic_analyzer_variable_map_8:
            name = util_ast_TIdentifier_0(intermediate_semantic_analyzer_variable_map_8[node.name.str_t])
            node.name = name
        else:

            raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
                f"Variable {node.name.str_t} was not declared in this scope")
        return
    if isinstance(node, parser_c_ast_CUnary_3):
        intermediate_semantic_analyzer_resolve_expression_8(node.exp)
        return
    if isinstance(node, parser_c_ast_CBinary_3):
        intermediate_semantic_analyzer_resolve_expression_8(node.exp_left)
        intermediate_semantic_analyzer_resolve_expression_8(node.exp_right)
        return
    if isinstance(node, (parser_c_ast_CAssignment_3, parser_c_ast_CAssignmentCompound_3)):
        if not isinstance(node.exp_left, parser_c_ast_CVar_3):

            raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
                f"Left expression {type(node.exp_left)} is an invalid lvalue")

        intermediate_semantic_analyzer_resolve_expression_8(node.exp_left)
        intermediate_semantic_analyzer_resolve_expression_8(node.exp_right)
        return

    raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
        "An error occurred in semantic analysis, not all nodes were visited")


cdef void intermediate_semantic_analyzer_resolve_variable_8(util_ast_AST_0 node):

    cdef int e
    cdef util_ast_AST_0 child_node
    cdef parser_c_ast_CBlockItem_3 block_item
    for child_node, _, _ in util_ast_ast_iter_child_nodes_0(node):
        if isinstance(child_node, parser_c_ast_CFunction_3):

            for e, block_item in enumerate(child_node.body):
                if isinstance(block_item, parser_c_ast_CS_3):
                    intermediate_semantic_analyzer_resolve_statement_8(block_item.statement)
                elif isinstance(block_item, parser_c_ast_CD_3):
                    intermediate_semantic_analyzer_resolve_declaration_8(block_item.declaration)
                else:

                    raise intermediate_semantic_analyzer_SemanticAnalyzerError_8(
                        "An error occurred in semantic analysis, not all nodes were visited")

        else:
            intermediate_semantic_analyzer_resolve_variable_8(child_node)


cdef void intermediate_semantic_analyzer_semantic_analysis_8(util_ast_AST_0 c_ast):
    global intermediate_semantic_analyzer_variable_map_8
    intermediate_semantic_analyzer_variable_map_8 = {}

    intermediate_semantic_analyzer_resolve_variable_8(c_ast)


from copy import deepcopy



class intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9, self).__init__(message)


cdef util_ast_TIdentifier_0 intermediate_three_address_generator_represent_identifier_9(util_ast_TIdentifier_0 node):
    """ <identifier> = Built-in identifier type """
    return util_ast_TIdentifier_0(deepcopy(node.str_t))


cdef util_ast_TInt_0 intermediate_three_address_generator_represent_int_9(util_ast_TInt_0 node):
    """ <int> = Built-in int type """
    return util_ast_TInt_0(deepcopy(node.int_t))

cdef intermediate_tac_ast_TacBinaryOp_6 intermediate_three_address_generator_represent_binary_op_9(parser_c_ast_CBinaryOp_3 node):
    """ binary_operator = Add | Subtract | Multiply | Divide | Remainder | BitAnd | BitOr | BitXor
                        | BitShiftLeft | BitShiftRight | Equal | NotEqual | LessThan | LessOrEqual
                        | GreaterThan | GreaterOrEqual """
    if isinstance(node, parser_c_ast_CAdd_3):
        return intermediate_tac_ast_TacAdd_6()
    if isinstance(node, parser_c_ast_CSubtract_3):
        return intermediate_tac_ast_TacSubtract_6()
    if isinstance(node, parser_c_ast_CMultiply_3):
        return intermediate_tac_ast_TacMultiply_6()
    if isinstance(node, parser_c_ast_CDivide_3):
        return intermediate_tac_ast_TacDivide_6()
    if isinstance(node, parser_c_ast_CRemainder_3):
        return intermediate_tac_ast_TacRemainder_6()
    if isinstance(node, parser_c_ast_CBitAnd_3):
        return intermediate_tac_ast_TacBitAnd_6()
    if isinstance(node, parser_c_ast_CBitOr_3):
        return intermediate_tac_ast_TacBitOr_6()
    if isinstance(node, parser_c_ast_CBitXor_3):
        return intermediate_tac_ast_TacBitXor_6()
    if isinstance(node, parser_c_ast_CBitShiftLeft_3):
        return intermediate_tac_ast_TacBitShiftLeft_6()
    if isinstance(node, parser_c_ast_CBitShiftRight_3):
        return intermediate_tac_ast_TacBitShiftRight_6()
    if isinstance(node, parser_c_ast_CEqual_3):
        return intermediate_tac_ast_TacEqual_6()
    if isinstance(node, parser_c_ast_CNotEqual_3):
        return intermediate_tac_ast_TacNotEqual_6()
    if isinstance(node, parser_c_ast_CLessThan_3):
        return intermediate_tac_ast_TacLessThan_6()
    if isinstance(node, parser_c_ast_CLessOrEqual_3):
        return intermediate_tac_ast_TacLessOrEqual_6()
    if isinstance(node, parser_c_ast_CGreaterThan_3):
        return intermediate_tac_ast_TacGreaterThan_6()
    if isinstance(node, parser_c_ast_CGreaterOrEqual_3):
        return intermediate_tac_ast_TacGreaterOrEqual_6()

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef intermediate_tac_ast_TacUnaryOp_6 intermediate_three_address_generator_represent_unary_op_9(parser_c_ast_CUnaryOp_3 node):
    """ unary_operator = Complement | Negate | Not """
    if isinstance(node, parser_c_ast_CComplement_3):
        return intermediate_tac_ast_TacComplement_6()
    if isinstance(node, parser_c_ast_CNegate_3):
        return intermediate_tac_ast_TacNegate_6()
    if isinstance(node, parser_c_ast_CNot_3):
        return intermediate_tac_ast_TacNot_6()

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef intermediate_tac_ast_TacValue_6 intermediate_three_address_generator_represent_value_9(parser_c_ast_CExp_3 node, bint outer = True):
    """ val = Constant(int) | Var(identifier) """
    cdef util_ast_TInt_0 value
    cdef util_ast_TIdentifier_0 name
    if outer:
        if isinstance(node, parser_c_ast_CConstant_3):
            value = intermediate_three_address_generator_represent_int_9(node.value)
            return intermediate_tac_ast_TacConstant_6(value)
        if isinstance(node, parser_c_ast_CVar_3):
            name = intermediate_three_address_generator_represent_identifier_9(node.name)
            return intermediate_tac_ast_TacVariable_6(name)

        raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
            "An error occurred in three address code representation, not all nodes were visited")

    name = intermediate_name_represent_variable_identifier_5(node)
    return intermediate_tac_ast_TacVariable_6(name)


cdef list[intermediate_tac_ast_TacInstruction_6] intermediate_three_address_generator_instructions_9 = []


cdef intermediate_tac_ast_TacValue_6 intermediate_three_address_generator_represent_exp_instructions_9(parser_c_ast_CExp_3 node):
    cdef intermediate_tac_ast_TacValue_6 val
    if isinstance(node, (parser_c_ast_CVar_3, parser_c_ast_CConstant_3)):
        val = intermediate_three_address_generator_represent_value_9(node)
        return val
    cdef intermediate_tac_ast_TacValue_6 src
    cdef intermediate_tac_ast_TacValue_6 dst
    if isinstance(node, parser_c_ast_CAssignment_3):
        src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_right)
        dst = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_left)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(src, dst))
        return dst
    cdef intermediate_tac_ast_TacUnaryOp_6 unary_op
    if isinstance(node, parser_c_ast_CUnary_3):
        src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp)
        dst = intermediate_three_address_generator_represent_value_9(node.exp, outer=False)
        unary_op = intermediate_three_address_generator_represent_unary_op_9(node.unary_op)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacUnary_6(unary_op, src, dst))
        return dst
    cdef intermediate_tac_ast_TacValue_6 src2
    cdef intermediate_tac_ast_TacBinaryOp_6 binary_op
    if isinstance(node, parser_c_ast_CBinary_3) and \
            not isinstance(node.binary_op, (parser_c_ast_CAnd_3, parser_c_ast_COr_3)):
        src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_left)
        src2 = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_right)
        dst = intermediate_three_address_generator_represent_value_9(node.exp_left, outer=False)
        binary_op = intermediate_three_address_generator_represent_binary_op_9(node.binary_op)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacBinary_6(binary_op, src, src2, dst))
        return dst
    if isinstance(node, parser_c_ast_CAssignmentCompound_3):
        src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_left)
        src2 = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_right)
        val = intermediate_three_address_generator_represent_value_9(node.exp_left, outer=False)
        binary_op = intermediate_three_address_generator_represent_binary_op_9(node.binary_op)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacBinary_6(binary_op, src, src2, val))
        dst = intermediate_three_address_generator_represent_value_9(node.exp_left)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(val, dst))
        return dst
    cdef intermediate_tac_ast_TacValue_6 istrue
    cdef intermediate_tac_ast_TacValue_6 is_false
    cdef util_ast_TIdentifier_0 label_true
    cdef util_ast_TIdentifier_0 label_false
    if isinstance(node, parser_c_ast_CBinary_3):
        if isinstance(node.binary_op, parser_c_ast_CAnd_3):
            is_true = intermediate_tac_ast_TacConstant_6(util_ast_TInt_0(1))
            is_false = intermediate_tac_ast_TacConstant_6(util_ast_TInt_0(0))
            label_true = intermediate_name_represent_label_identifier_5("and_true")
            label_false = intermediate_name_represent_label_identifier_5("and_false")
            src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_left)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJumpIfZero_6(src, label_false))
            src2 = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_right)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJumpIfZero_6(src2, label_false))
            dst = intermediate_three_address_generator_represent_value_9(node.exp_left, outer=False)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(is_true, dst))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJump_6(label_true))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacLabel_6(label_false))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(is_false, dst))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacLabel_6(label_true))
            return dst
        if isinstance(node.binary_op, parser_c_ast_COr_3):
            is_true = intermediate_tac_ast_TacConstant_6(util_ast_TInt_0(1))
            is_false = intermediate_tac_ast_TacConstant_6(util_ast_TInt_0(0))
            label_true = intermediate_name_represent_label_identifier_5("or_true")
            label_false = intermediate_name_represent_label_identifier_5("or_false")
            src = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_left)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJumpIfNotZero_6(src, label_true))
            src2 = intermediate_three_address_generator_represent_exp_instructions_9(node.exp_right)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJumpIfNotZero_6(src2, label_true))
            dst = intermediate_three_address_generator_represent_value_9(node.exp_left, outer=False)
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(is_false, dst))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacJump_6(label_false))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacLabel_6(label_true))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(is_true, dst))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacLabel_6(label_false))
            return dst

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef void intermediate_three_address_generator_represent_statement_instructions_9(parser_c_ast_CStatement_3 node):
    if isinstance(node, parser_c_ast_CNull_3):
        return
    if isinstance(node, parser_c_ast_CExpression_3):
        _ = intermediate_three_address_generator_represent_exp_instructions_9(node.exp)
        return
    cdef intermediate_tac_ast_TacValue_6 val
    if isinstance(node, parser_c_ast_CReturn_3):
        val = intermediate_three_address_generator_represent_exp_instructions_9(node.exp)
        intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacReturn_6(val))
        return

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef void intermediate_three_address_generator_represent_declaration_instructions_9(parser_c_ast_CDeclaration_3 node):
    cdef intermediate_tac_ast_TacValue_6 src
    cdef intermediate_tac_ast_TacValue_6 dst
    if isinstance(node, parser_c_ast_CDecl_3):
        if node.init:
            src = intermediate_three_address_generator_represent_exp_instructions_9(node.init)
            dst = intermediate_three_address_generator_represent_value_9(parser_c_ast_CVar_3(node.name))
            intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacCopy_6(src, dst))
        return

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef void intermediate_three_address_generator_represent_list_instructions_9(list[parser_c_ast_CBlockItem_3] list_node):
    """ instruction = Return(val) | Unary(unary_operator, val src, val dst)
                | Binary(binary_operator, val src1, val src2, val dst) | Copy(val src, val dst)
                | Jump(identifier target) | JumpIfZero(val condition, identifier target)
                | JumpIfNotZero(val condition, identifier target) | Label(identifier name) """
    global intermediate_three_address_generator_instructions_9
    intermediate_three_address_generator_instructions_9 = []

    cdef parser_c_ast_CBlockItem_3 item_node
    for item_node in list_node:
        if isinstance(item_node, parser_c_ast_CS_3):
            intermediate_three_address_generator_represent_statement_instructions_9(item_node.statement)
        elif isinstance(item_node, parser_c_ast_CD_3):
            intermediate_three_address_generator_represent_declaration_instructions_9(item_node.declaration)
        else:

            raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
                "An error occurred in three address code representation, not all nodes were visited")

    intermediate_three_address_generator_instructions_9.append(intermediate_tac_ast_TacReturn_6(intermediate_tac_ast_TacConstant_6(util_ast_TInt_0(0))))


cdef intermediate_tac_ast_TacFunctionDef_6 intermediate_three_address_generator_represent_function_def_9(parser_c_ast_CFunctionDef_3 node):
    """ function_definition = Function(identifier, instruction* body) """
    cdef util_ast_TIdentifier_0 name
    if isinstance(node, parser_c_ast_CFunction_3):
        name = intermediate_three_address_generator_represent_identifier_9(node.name)
        intermediate_three_address_generator_represent_list_instructions_9(node.body)
        return intermediate_tac_ast_TacFunction_6(name, intermediate_three_address_generator_instructions_9)

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef intermediate_tac_ast_TacProgram_6 intermediate_three_address_generator_represent_program_9(util_ast_AST_0 node):
    """ util_ast_AST_0 = Program(function_definition) """
    cdef intermediate_tac_ast_TacFunctionDef_6 function_def
    if isinstance(node, parser_c_ast_CProgram_3):
        function_def = intermediate_three_address_generator_represent_function_def_9(node.function_def)
        return intermediate_tac_ast_TacProgram_6(function_def)

    raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
        "An error occurred in three address code representation, not all nodes were visited")


cdef util_ast_AST_0 intermediate_three_address_generator_three_address_code_representation_9(util_ast_AST_0 c_ast):

    cdef util_ast_AST_0 tac_ast = intermediate_three_address_generator_represent_program_9(c_ast)

    if not tac_ast:
        raise intermediate_three_address_generator_ThreeAddressCodeGeneratorError_9(
            "An error occurred in three address code representation, ASM was not generated")

    return tac_ast




class parser_parser_ParserError_10(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(parser_parser_ParserError_10, self).__init__(message)


cdef list[parser_lexer_Token_4] parser_parser_tokens_10 = []
cdef parser_lexer_Token_4 parser_parser_next_token_10 = parser_lexer_Token_4('', parser_lexer_TOKEN_KIND_4.get('error'))
cdef parser_lexer_Token_4 parser_parser_peek_token_10 = parser_lexer_Token_4('', parser_lexer_TOKEN_KIND_4.get('error'))


cdef void parser_parser_expect_next_is_10(parser_lexer_Token_4 _next_token, int expected_token):
    if _next_token.token_kind != expected_token:
        raise parser_parser_ParserError_10(
            f"""Expected token {
                list(parser_lexer_TOKEN_KIND_4.iter().keys())[
                       list(parser_lexer_TOKEN_KIND_4.iter().values()).index(expected_token)
            ]} but found \"{_next_token.token}\"""")


cdef void parser_parser_expect_next_in_10(parser_lexer_Token_4 _next_token, tuple[int, ...] expected_tokens):
    if _next_token.token_kind not in expected_tokens:
        raise parser_parser_ParserError_10(
            f"""Expected token in kinds { tuple([
                list(parser_lexer_TOKEN_KIND_4.iter().keys())[
                       list(parser_lexer_TOKEN_KIND_4.iter().values()).index(expected_token)
                ] for expected_token in expected_tokens])
            } but found \"{_next_token.token}\"""")


cdef parser_lexer_Token_4 parser_parser_pop_next_10():
    global parser_parser_next_token_10

    try:
        parser_parser_next_token_10 = parser_parser_tokens_10.pop(0)
        return parser_parser_next_token_10
    except IndexError:
        raise StopIteration


cdef parser_lexer_Token_4 parser_parser_peek_next_10():
    global parser_parser_peek_token_10

    try:
        parser_parser_peek_token_10 = parser_parser_tokens_10[0]
        return parser_parser_peek_token_10
    except IndexError:
        raise StopIteration


cdef util_ast_TIdentifier_0 parser_parser_parse_identifier_10():
    """ <identifier> ::= ? An identifier token ? """
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('identifier'))
    return util_ast_TIdentifier_0(parser_parser_next_token_10.token)


cdef util_ast_TInt_0 parser_parser_parse_int_10():
    """ <int> ::= ? A constant token ? """
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('constant'))
    return util_ast_TInt_0(int(parser_parser_next_token_10.token))


cdef parser_c_ast_CBinaryOp_3 parser_parser_parse_binary_op_10():
    """ <binop> ::= "-" | "+" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "&&" | "||" | "==" | "!="
                  | "<" | "<=" | ">" | ">=" """
    parser_parser_expect_next_in_10(parser_parser_pop_next_10(), (parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                   parser_lexer_TOKEN_KIND_4.get('binop_addition'),
                   parser_lexer_TOKEN_KIND_4.get('binop_multiplication'),
                   parser_lexer_TOKEN_KIND_4.get('binop_division'),
                   parser_lexer_TOKEN_KIND_4.get('binop_remainder'),
                   parser_lexer_TOKEN_KIND_4.get('binop_bitand'),
                   parser_lexer_TOKEN_KIND_4.get('binop_bitor'),
                   parser_lexer_TOKEN_KIND_4.get('binop_bitxor'),
                   parser_lexer_TOKEN_KIND_4.get('binop_bitshiftleft'),
                   parser_lexer_TOKEN_KIND_4.get('binop_bitshiftright'),
                   parser_lexer_TOKEN_KIND_4.get('binop_lessthan'),
                   parser_lexer_TOKEN_KIND_4.get('binop_lessthanorequal'),
                   parser_lexer_TOKEN_KIND_4.get('binop_greaterthan'),
                   parser_lexer_TOKEN_KIND_4.get('binop_greaterthanorequal'),
                   parser_lexer_TOKEN_KIND_4.get('binop_equalto'),
                   parser_lexer_TOKEN_KIND_4.get('binop_notequal'),
                   parser_lexer_TOKEN_KIND_4.get('binop_and'),
                   parser_lexer_TOKEN_KIND_4.get('binop_or'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_plus'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_difference'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_product'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_quotient'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_remainder'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_bitand'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_bitor'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_bitxor'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft'),
                   parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright')))
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_difference')):
        return parser_c_ast_CSubtract_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_addition'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_plus')):
        return parser_c_ast_CAdd_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_multiplication'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_product')):
        return parser_c_ast_CMultiply_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_division'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_quotient')):
        return parser_c_ast_CDivide_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_remainder'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_remainder')):
        return parser_c_ast_CRemainder_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_bitand'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_bitand')):
        return parser_c_ast_CBitAnd_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_bitor'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_bitor')):
        return parser_c_ast_CBitOr_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_bitxor'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_bitxor')):
        return parser_c_ast_CBitXor_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_bitshiftleft'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft')):
        return parser_c_ast_CBitShiftLeft_3()
    if parser_parser_next_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('binop_bitshiftright'),
                                 parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright')):
        return parser_c_ast_CBitShiftRight_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_and'):
        return parser_c_ast_CAnd_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_or'):
        return parser_c_ast_COr_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_equalto'):
        return parser_c_ast_CEqual_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_notequal'):
        return parser_c_ast_CNotEqual_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_lessthan'):
        return parser_c_ast_CLessThan_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_lessthanorequal'):
        return parser_c_ast_CLessOrEqual_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_greaterthan'):
        return parser_c_ast_CGreaterThan_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('binop_greaterthanorequal'):
        return parser_c_ast_CGreaterOrEqual_3()


cdef parser_c_ast_CUnaryOp_3 parser_parser_parse_unary_op_10():
    """ <unop> ::= "-" | "~" | "!" """
    parser_parser_expect_next_in_10(parser_parser_pop_next_10(), (parser_lexer_TOKEN_KIND_4.get('unop_complement'),
                   parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                   parser_lexer_TOKEN_KIND_4.get('unop_not')))
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('unop_complement'):
        return parser_c_ast_CComplement_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('unop_negation'):
        return parser_c_ast_CNegate_3()
    if parser_parser_next_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('unop_not'):
        return parser_c_ast_CNot_3()


cdef parser_c_ast_CExp_3 parser_parser_parse_factor_10():
    """ <factor> ::= <int> | <identifier> | <unop> <factor> | "(" <exp> ")" """
    parser_parser_expect_next_in_10(parser_parser_peek_next_10(),(parser_lexer_TOKEN_KIND_4.get('constant'),
                   parser_lexer_TOKEN_KIND_4.get('identifier'),
                   parser_lexer_TOKEN_KIND_4.get('unop_complement'),
                   parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                   parser_lexer_TOKEN_KIND_4.get('unop_not'),
                   parser_lexer_TOKEN_KIND_4.get('parenthesis_open')))
    cdef parser_c_ast_CUnaryOp_3 unary_op
    cdef parser_c_ast_CExp_3 inner_exp
    if parser_parser_peek_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('unop_complement'),
                                 parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                                 parser_lexer_TOKEN_KIND_4.get('unop_not')):
        unary_op = parser_parser_parse_unary_op_10()
        inner_exp = parser_parser_parse_factor_10()
        return parser_c_ast_CUnary_3(unary_op, inner_exp)
    cdef util_ast_TInt_0 value
    if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('constant'):
        value = parser_parser_parse_int_10()
        return parser_c_ast_CConstant_3(value)
    cdef util_ast_TIdentifier_0 name
    if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('identifier'):
        name = parser_parser_parse_identifier_10()
        return parser_c_ast_CVar_3(name)
    if parser_parser_pop_next_10().token_kind == parser_lexer_TOKEN_KIND_4.get('parenthesis_open'):
        inner_exp = parser_parser_parse_exp_10()
        parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('parenthesis_close'))
        return inner_exp


cdef parser_c_ast_CExp_3 parser_parser_parse_exp_10(int min_precedence = 0):
    """ <exp> ::= <factor> | <exp> <binop> <exp> """
    cdef int precedence
    cdef parser_c_ast_CBinaryOp_3 binary_op
    cdef parser_c_ast_CExp_3 exp_right
    cdef parser_c_ast_CExp_3 exp_left = parser_parser_parse_factor_10()
    while parser_parser_peek_next_10().token_kind in (parser_lexer_TOKEN_KIND_4.get('unop_negation'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_addition'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_multiplication'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_division'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_remainder'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_bitand'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_bitor'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_bitxor'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_bitshiftleft'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_bitshiftright'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_lessthan'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_lessthanorequal'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_greaterthan'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_greaterthanorequal'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_equalto'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_notequal'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_and'),
                                     parser_lexer_TOKEN_KIND_4.get('binop_or'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_simple'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_plus'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_difference'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_product'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_quotient'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_remainder'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_bitand'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_bitor'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_bitxor'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft'),
                                     parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright')):
        precedence = parser_precedence_parse_token_precedence_7(parser_parser_peek_token_10.token_kind)
        if precedence < min_precedence:
            break
        if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('assignment_simple'):
            _ = parser_parser_pop_next_10()
            exp_right = parser_parser_parse_exp_10(precedence)
            exp_left = parser_c_ast_CAssignment_3(exp_left, exp_right)
        elif parser_parser_peek_token_10.token_kind in (parser_lexer_TOKEN_KIND_4.get('assignment_plus'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_difference'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_product'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_quotient'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_remainder'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_bitand'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_bitor'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_bitxor'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftleft'),
                                       parser_lexer_TOKEN_KIND_4.get('assignment_bitshiftright')):
            binary_op = parser_parser_parse_binary_op_10()
            exp_right = parser_parser_parse_exp_10(precedence)
            exp_left = parser_c_ast_CAssignmentCompound_3(binary_op, exp_left, exp_right)
        else:
            binary_op = parser_parser_parse_binary_op_10()
            exp_right = parser_parser_parse_exp_10(precedence + 1)
            exp_left = parser_c_ast_CBinary_3(binary_op, exp_left, exp_right)
    return exp_left


cdef parser_c_ast_CStatement_3 parser_parser_parse_statement_10():
    """ <statement> ::= "return" <exp> ";" | <exp> ";" | ";" """
    if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('semicolon'):
        _ = parser_parser_pop_next_10()
        return parser_c_ast_CNull_3()
    cdef parser_c_ast_CExp_3 return_exp
    if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('key_return'):
        _ = parser_parser_pop_next_10()
        return_exp = parser_parser_parse_exp_10()
        parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('semicolon'))
        return parser_c_ast_CReturn_3(return_exp)
    if True:
        return_exp = parser_parser_parse_exp_10()
        parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('semicolon'))
        return parser_c_ast_CExpression_3(return_exp)


cdef parser_c_ast_CDeclaration_3 parser_parser_parse_declaration_10():
    """ <declaration> ::= "int" <identifier> [ "=" <exp> ] ";" """
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('key_int'))
    cdef util_ast_TIdentifier_0 name = parser_parser_parse_identifier_10()
    cdef parser_c_ast_CExp_3 init
    if parser_parser_peek_next_10().token_kind == parser_lexer_TOKEN_KIND_4.get('assignment_simple'):
        _ = parser_parser_pop_next_10()
        init = parser_parser_parse_exp_10()
    else:
        init = None
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('semicolon'))
    return parser_c_ast_CDecl_3(name, init)


cdef parser_c_ast_CBlockItem_3 parser_parser_parse_block_item_10():
    """ <block-item> ::= <statement> | <declaration> """
    cdef parser_c_ast_CDeclaration_3 declaration
    if parser_parser_peek_token_10.token_kind == parser_lexer_TOKEN_KIND_4.get('key_int'):
        declaration = parser_parser_parse_declaration_10()
        return parser_c_ast_CD_3(declaration)
    cdef parser_c_ast_CStatement_3 statement
    if True:
        statement = parser_parser_parse_statement_10()
        return parser_c_ast_CS_3(statement)


cdef parser_c_ast_CFunctionDef_3 parser_parser_parse_function_def_10():
    """ <function> ::= "int" <identifier> "(" "void" ")" "{" { <block-item> } "}" """
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('key_int'))
    cdef util_ast_TIdentifier_0 name = parser_parser_parse_identifier_10()
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('parenthesis_open'))
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('key_void'))
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('parenthesis_close'))
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('brace_open'))
    cdef parser_c_ast_CBlockItem_3 block_item
    cdef list[parser_c_ast_CBlockItem_3] body = []
    while parser_parser_peek_next_10().token_kind != parser_lexer_TOKEN_KIND_4.get('brace_close'):
        block_item = parser_parser_parse_block_item_10()
        body.append(block_item)
    parser_parser_expect_next_is_10(parser_parser_pop_next_10(), parser_lexer_TOKEN_KIND_4.get('brace_close'))
    return parser_c_ast_CFunction_3(name, body)


cdef parser_c_ast_CProgram_3 parser_parser_parse_program_10():
    """ <program> ::= <function> """
    cdef parser_c_ast_CFunctionDef_3 function_def = parser_parser_parse_function_def_10()
    return parser_c_ast_CProgram_3(function_def)


cdef util_ast_AST_0 parser_parser_parsing_10(list[parser_lexer_Token_4] lex_tokens):
    global parser_parser_tokens_10
    global parser_parser_next_token_10
    global parser_parser_peek_token_10
    parser_parser_tokens_10 = lex_tokens

    cdef util_ast_AST_0 c_ast
    while True:
        try:
            parser_parser_next_token_10: parser_lexer_Token_4 = parser_lexer_Token_4('', parser_lexer_TOKEN_KIND_4.get('error'))
            parser_parser_peek_token_10: parser_lexer_Token_4 = parser_lexer_Token_4('', parser_lexer_TOKEN_KIND_4.get('error'))
            c_ast = parser_parser_parse_program_10()

        except StopIteration:
            break

    if parser_parser_tokens_10:
        raise parser_parser_ParserError_10(
            "An error occurred in parser_parser_parsing_10, not all parser_parser_tokens_10 were consumed")

    if not c_ast:
        raise parser_parser_ParserError_10(
            "An error occurred in parser_parser_parsing_10, util_ast_AST_0 was not parsed")

    return c_ast


import platform
import sys
import os





cdef bint __compiler_DEBUG_11 = True


class __compiler_CompilerError_11(RuntimeError):
    def __init__(self, message: str) -> None:
        self.message = message
        super(__compiler_CompilerError_11, self).__init__(message)


cdef util_iota_enum_IotaEnum_1 __compiler_OPT_11 = util_iota_enum_IotaEnum_1((
    "none",
    "lex",
    "parse",
    "validate",
    "tacky",
    "codegen",
    "codeemit",
    "S"
))


cdef void __compiler_debug_11(str string = "", str end="\n"):
    if __compiler_DEBUG_11:
        print(string, end=end)


cdef void __compiler_compile_11(str filename, int opt_exit, int opt_s):

    print("-- Start parser_lexer_lexing_4...")
    cdef list[parser_lexer_Token_4] tokens = parser_lexer_lexing_4(filename)
    print("-- Exit parser_lexer_lexing_4: OK")
    cdef int e
    cdef parser_lexer_Token_4 token
    if opt_exit == __compiler_OPT_11.get('lex'):
        for e, token in enumerate(tokens):
            __compiler_debug_11(str(e) + ': ("' + token.token + '", ' +
                  str(token.token_kind) + ')')
        return

    print("-- Start parser_parser_parsing_10...")
    cdef util_ast_AST_0 c_ast = parser_parser_parsing_10(tokens)
    print("-- Exit parser_parser_parsing_10: OK")
    if opt_exit == __compiler_OPT_11.get('parse'):
        __compiler_debug_11(util_ast_ast_pretty_string_0(c_ast))
        return

    print("-- Start semantic analysis...")
    intermediate_semantic_analyzer_semantic_analysis_8(c_ast)
    print("-- Exit semantic analysis: OK")
    if opt_exit == __compiler_OPT_11.get('validate'):
        __compiler_debug_11(util_ast_ast_pretty_string_0(c_ast))
        return

    print("-- Start tac representation...")
    cdef util_ast_AST_0 tac_ast = intermediate_three_address_generator_three_address_code_representation_9(c_ast)
    print("-- Exit tac representation: OK")
    if opt_exit == __compiler_OPT_11.get('tacky'):
        __compiler_debug_11(util_ast_ast_pretty_string_0(tac_ast))
        return

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


cdef tuple[str, int, int] __compiler_arg_parse_11(list[str] argv):

    _ = "" if not argv else argv.pop(0)
    if not argv:
        raise __compiler_CompilerError_11(
            f"No file was provided in args")

    cdef str filename = "" if not argv else argv.pop(0)
    if not os.path.exists(filename):
        raise __compiler_CompilerError_11(
            f"File {filename} does not exist")

    cdef int opt_exit = __compiler_OPT_11.get('none')
    if "--codeemit" in argv:
        opt_exit = __compiler_OPT_11.get('codeemit')
    elif "--codegen" in argv:
        opt_exit = __compiler_OPT_11.get('codegen')
    elif "--tacky" in argv:
        opt_exit = __compiler_OPT_11.get('tacky')
    elif "--validate" in argv:
        opt_exit = __compiler_OPT_11.get('validate')
    elif "--parse" in argv:
        opt_exit = __compiler_OPT_11.get('parse')
    elif "--lex" in argv:
        opt_exit = __compiler_OPT_11.get('lex')

    cdef int opt_s = __compiler_OPT_11.get('none')
    if "-S" in argv:
        opt_s = __compiler_OPT_11.get('S')

    return filename, opt_exit, opt_s


cpdef void __compiler_main_11():

    if (int(platform.python_version().split('.')[0]) < 3 or
            (int(platform.python_version().split('.')[0]) >= 3 and
             int(platform.python_version().split('.')[1]) < 9)):
        raise __compiler_CompilerError_11(
            f"Python version too old, >= 3.9 required but {platform.python_version()} used")

    cdef str filename
    cdef int opt_exit
    cdef int opt_s
    filename, opt_exit, opt_s = __compiler_arg_parse_11(sys.argv)
    __compiler_compile_11(filename, opt_exit, opt_s)

    exit(0)
